
kernel.elf:     file format elf64-littleaarch64
kernel.elf
architecture: aarch64, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000000000043a000

Program Header:
    LOAD off    0x0000000000000000 vaddr 0x0000000000430000 paddr 0x0000000000430000 align 2**16
         filesz 0x000000000000a124 memsz 0x000000000000d000 flags rwx
   STACK off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**4
         filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw-
private flags = 0x0:

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text         000000a4  000000000043a000  000000000043a000  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000000c  000000000043a0a8  000000000043a0a8  0000a0a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .eh_frame     0000006c  000000000043a0b8  000000000043a0b8  0000a0b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00002000  000000000043b000  000000000043b000  0000a124  2**12
                  ALLOC
  4 .debug_line   000000ba  0000000000000000  0000000000000000  0000a124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 0000004b  0000000000000000  0000000000000000  0000a1de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000000ff  0000000000000000  0000000000000000  0000a229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000000bd  0000000000000000  0000000000000000  0000a328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000060  0000000000000000  0000000000000000  0000a3f0  2**4
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    000000c0  0000000000000000  0000000000000000  0000a450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000001b  0000000000000000  0000000000000000  0000a510  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
000000000043a000 l    d  .text	0000000000000000 .text
000000000043a0a8 l    d  .rodata	0000000000000000 .rodata
000000000043a0b8 l    d  .eh_frame	0000000000000000 .eh_frame
000000000043b000 l    d  .bss	0000000000000000 .bss
0000000000000000 l    d  .debug_line	0000000000000000 .debug_line
0000000000000000 l    d  .debug_line_str	0000000000000000 .debug_line_str
0000000000000000 l    d  .debug_info	0000000000000000 .debug_info
0000000000000000 l    d  .debug_abbrev	0000000000000000 .debug_abbrev
0000000000000000 l    d  .debug_aranges	0000000000000000 .debug_aranges
0000000000000000 l    d  .debug_str	0000000000000000 .debug_str
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000000 l    df *ABS*	0000000000000000 dmos.s.o
0000000000000000 l    df *ABS*	0000000000000000 dmos.c
000000000043a040 g     F .text	0000000000000044 uart_putstr
000000000043a084 g     F .text	0000000000000020 kernel_main
000000000043b000 g       .bss	0000000000000000 _stack_top
000000000043a000 g       .text	0000000000000000 _start
000000000043a018 g     F .text	0000000000000028 uart_putchar



Disassembly of section .text:

000000000043a000 <_start>:
.section .text
.global _start

_start:
    // 设置栈指针
    ldr x0, =_stack_top
  43a000:	58000080 	ldr	x0, 43a010 <_start+0x10>
    mov sp, x0
  43a004:	9100001f 	mov	sp, x0

    // 调用 C 语言的 main 函数
    bl kernel_main
  43a008:	9400001f 	bl	43a084 <kernel_main>

    // 死循环，防止返回
1:  b 1b
  43a00c:	14000000 	b	43a00c <_start+0xc>
  43a010:	0043b000 	.word	0x0043b000
  43a014:	00000000 	.word	0x00000000

000000000043a018 <uart_putchar>:

// 单个字符输出函数
void uart_putchar(char c) {
  43a018:	d10083ff 	sub	sp, sp, #0x20
  43a01c:	39003fe0 	strb	w0, [sp, #15]
    volatile unsigned int * const UART0DR = (unsigned int *)0xFEB50000;
  43a020:	d2bfd6a0 	mov	x0, #0xfeb50000            	// #4273274880
  43a024:	f9000fe0 	str	x0, [sp, #24]
    *UART0DR = (unsigned int)c;
  43a028:	39403fe1 	ldrb	w1, [sp, #15]
  43a02c:	f9400fe0 	ldr	x0, [sp, #24]
  43a030:	b9000001 	str	w1, [x0]
}
  43a034:	d503201f 	nop
  43a038:	910083ff 	add	sp, sp, #0x20
  43a03c:	d65f03c0 	ret

000000000043a040 <uart_putstr>:

// 字符串输出函数
void uart_putstr(const char *str) {
  43a040:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
  43a044:	910003fd 	mov	x29, sp
  43a048:	f9000fe0 	str	x0, [sp, #24]
    while (*str) {
  43a04c:	14000006 	b	43a064 <uart_putstr+0x24>
        uart_putchar(*str++);
  43a050:	f9400fe0 	ldr	x0, [sp, #24]
  43a054:	91000401 	add	x1, x0, #0x1
  43a058:	f9000fe1 	str	x1, [sp, #24]
  43a05c:	39400000 	ldrb	w0, [x0]
  43a060:	97ffffee 	bl	43a018 <uart_putchar>
    while (*str) {
  43a064:	f9400fe0 	ldr	x0, [sp, #24]
  43a068:	39400000 	ldrb	w0, [x0]
  43a06c:	7100001f 	cmp	w0, #0x0
  43a070:	54ffff01 	b.ne	43a050 <uart_putstr+0x10>  // b.any
    }
}
  43a074:	d503201f 	nop
  43a078:	d503201f 	nop
  43a07c:	a8c27bfd 	ldp	x29, x30, [sp], #32
  43a080:	d65f03c0 	ret

000000000043a084 <kernel_main>:

// main.c
void kernel_main(void) {
  43a084:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
  43a088:	910003fd 	mov	x29, sp
    // 在这里可以添加你的内核代码
    uart_putstr("hello world");
  43a08c:	90000000 	adrp	x0, 43a000 <_start>
  43a090:	9102a000 	add	x0, x0, #0xa8
  43a094:	97ffffeb 	bl	43a040 <uart_putstr>
}
  43a098:	d503201f 	nop
  43a09c:	a8c17bfd 	ldp	x29, x30, [sp], #16
  43a0a0:	d65f03c0 	ret
