//! Platform constants and parameters for rk3588-aarch64-hv.
//! Generated by build.rs, DO NOT edit!

/// Stack size of each task.
pub const TASK_STACK_SIZE: usize = 0x40000;
/// Number of timer ticks per second (Hz). A timer tick may contain several timer
/// interrupts.
pub const TICKS_PER_SEC: usize = 100;
/// Architecture identifier.
pub const ARCH: &str = "aarch64";
/// Platform identifier.
pub const PLATFORM: &str = "aarch64-rk3588";
/// Base physical address of the kernel image.
pub const KERNEL_BASE_PADDR: usize = 0x40_0000;
/// Base virtual address of the kernel image.
pub const KERNEL_BASE_VADDR: usize = 0x0000_0000_0040_0000;
/// Linear mapping offset, for quick conversions between physical and virtual
/// addresses.
pub const PHYS_VIRT_OFFSET: usize = 0x0000_0000_0000_0000;
/// MMIO regions with format (`base_paddr`, `size`).
pub const MMIO_REGIONS: &[(usize, usize)] = &[
    (0xfeb50000, 0x1000),
    (0xfe600000, 0x10000),
    (0xfe680000, 0x100000),
];

pub const VIRTIO_MMIO_REGIONS: &[(usize, usize)] = &[
];
/// Base physical address of the PCIe ECAM space.
/// pci-ecam-base = "0x40_1000_0000"
/// End PCI bus number (`bus-range` property in device tree).
/// pci-bus-end = "0xff"
/// PCI device memory ranges (`ranges` property in device tree).
/// pci-ranges = []

/// UART Address
pub const UART_PADDR: usize = 0xfeb50000;
/// UART irq from device tree
pub const UART_IRQ_NUM: usize = 0x14d;
/// GICD Address
pub const GICD_PADDR: usize = 0xfe600000;
/// GICR Address
pub const GICC_PADDR: usize = 0xfe680000;
/// 没有用到临时添加
pub const GICH_PADDR: usize = 0x6666_0000;
/// PSCI
pub const PSCI_METHOD: &str = "smc";
/// Number of CPUs
pub const SMP: usize = 1;
